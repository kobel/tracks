if @saved
  page.hide 'status'
  status_message = 'Added new next action'
  status_message += ' to tickler' if @todo.deferred?
  status_message += ' in pending state' if @todo.pending?
  status_message = 'Added new project / ' + status_message if @new_project_created
  status_message = 'Added new context / ' + status_message if @new_context_created
  page.notify :notice, status_message, 5.0
  page['badge_count'].replace_html @down_count
  page.send :record, "$('#todo-form-new-action').clearForm();$('#todo-form-new-action input:text:first').focus();"
  page['todo_context_name'].value = @initial_context_name
  page['todo_project_name'].value = @initial_project_name
  page['tag_list'].value = @default_tags
  #page << "updateContextNamesForAutoComplete(#{context_names_for_autocomplete})" if @new_context_created
  #page << "projectAutoCompleter.options.array = #{project_names_for_autocomplete}" if @new_project_created
  if should_show_new_item()
    if @new_context_created
      page.insert_html :top, 'display_box', :partial => 'contexts/context', :locals => { :context => @todo.context, :collapsible => true }
    else
      page.call "todoItems.ensureVisibleWithEffectAppear", "c#{@todo.context_id}" if source_view_is_one_of(:todo, :deferred, :tag)
      page.insert_html :bottom, item_container_id(@todo), :partial => 'todos/todo', :locals => { :todo => @todo, :parent_container_type => parent_container_type, :source_view => @source_view }
      page.visual_effect :highlight, dom_id(@todo), :duration => 3
      page[empty_container_msg_div_id].hide unless empty_container_msg_div_id.nil?
    end
    if (source_view_is :project and @todo.pending?) or (source_view_is :deferred)
        page['tickler-empty-nd'].hide # For some reason this does not work: page['tickler-empty-nd'].hide if (@todo.pending? or (source_view_is :deferred))
    end
  end
  # Update predecessors (if they exist and are visible)
  @todo.uncompleted_predecessors.each do |p|
    page << "if ($(\'#{item_container_id(p)}\')) {"
    page[p].replace_html :partial => 'todos/todo',
    :locals => { :todo => p, :parent_container_type => parent_container_type }
    page << "}"
  end
  # make sure the behavior of the new/updated todo is enabled
  page << "enable_rich_interaction();"
else
  page.show 'status'
  page.replace_html 'status', "#{error_messages_for('todo', :object_name => 'action')}"
end
